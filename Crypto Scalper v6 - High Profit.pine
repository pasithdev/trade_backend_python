//@version=5
strategy("Crypto Scalper v6 - High Profit", "Scalper v6 HP", overlay=true, pyramiding=3, default_qty_type=strategy.percent_of_equity, default_qty_value=100, calc_on_every_tick=true, commission_type=strategy.commission.percent, commission_value=0.1)

// ==============================
// 1. USER INPUTS - OPTIMIZED
// ==============================
// Trend and Timeframe Inputs
i_trendTf          = input.timeframe("60", "Higher Trend Timeframe")
i_emaFastLen       = input.int(13, "Fast EMA Length", minval=1)
i_emaSlowLen       = input.int(34, "Slow EMA Length", minval=1)
i_ema200           = input.int(200, "Long-term EMA Filter", minval=50)

// Volatility and Market Filter Inputs
i_atrLen           = input.int(14, "ATR Length", minval=1)
i_atrMultSl        = input.float(1.2, "ATR Stop-Loss Multiplier", minval=0.3)
i_atrMultTp1       = input.float(2.0, "ATR Take-Profit 1 Multiplier", minval=0.5)
i_atrMultTp2       = input.float(3.5, "ATR Take-Profit 2 Multiplier", minval=1.0)
i_atrMultTp3       = input.float(5.0, "ATR Take-Profit 3 Multiplier", minval=2.0)
i_kamaLen          = input.int(15, "KAMA Length", minval=1)

// Enhanced Entry Logic Inputs
i_volumeSpike      = input.float(2.0, "Volume Spike Threshold", minval=1.0)
i_minCandleBody    = input.float(0.15, "Min. Candle Body %", minval=0.01, step=0.01) * 0.01
i_swingLookback    = input.int(7, "Swing High/Low Lookback", minval=1)
i_rsiLen           = input.int(14, "RSI Length", minval=2)
i_rsiOverbought    = input.int(65, "RSI Overbought", minval=50, maxval=90)
i_rsiOversold      = input.int(35, "RSI Oversold", minval=10, maxval=50)

// Advanced Risk Management
i_equityRiskPct    = input.float(0.8, "Risk % of Equity", minval=0.1, step=0.1) * 0.01
i_partialClose1    = input.float(30, "Partial Close 1 %", minval=10, maxval=50)
i_partialClose2    = input.float(30, "Partial Close 2 %", minval=10, maxval=50)
i_trailAtrMult     = input.float(1.5, "Trailing Stop ATR Mult.", minval=0.5)
i_breakEvenAtr     = input.float(1.0, "Move to Breakeven after ATR Mult.", minval=0.5)

// Frequency Control Inputs
i_maxTradesPerHr   = input.int(4, "Max Trades Per Hour", minval=1)
i_cooldownBars     = input.int(2, "Cooldown Bars After Loss", minval=0)
i_minTimeBetween   = input.int(3, "Min Bars Between Trades", minval=0)

// ==============================
// 2. ENHANCED INDICATORS
// ==============================
// Trend Direction (Higher TF)
[htfFastEma, htfSlowEma, htfEma200] = request.security(syminfo.tickerid, i_trendTf, [ta.ema(close, i_emaFastLen), ta.ema(close, i_emaSlowLen), ta.ema(close, i_ema200)], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
htfTrendUp = htfFastEma > htfSlowEma and close > htfEma200
htfTrendDn = htfFastEma < htfSlowEma and close < htfEma200

// Local trend
ema200 = ta.ema(close, i_ema200)
localTrendUp = close > ema200
localTrendDn = close < ema200

// Volatility and Market Filters
atrValue = ta.atr(i_atrLen)
atrSma = ta.sma(atrValue, 20)
volatilityExpanding = atrValue > atrSma

// Custom KAMA (Kaufman's Adaptive Moving Average) calculation
kama_er = math.abs(ta.change(close, i_kamaLen)) / math.sum(math.abs(ta.change(close)), i_kamaLen)
kama_fast = 2.0 / (2.0 + 1.0)
kama_slow = 2.0 / (30.0 + 1.0)
kama_sc = math.pow(kama_er * (kama_fast - kama_slow) + kama_slow, 2)
var float kamaValue = close
kamaValue := nz(kamaValue[1]) + kama_sc * (close - nz(kamaValue[1]))

priceAboveKama = close > kamaValue
priceBelowKama = close < kamaValue

// RSI Filter for momentum
rsiValue = ta.rsi(close, i_rsiLen)
rsiOversold = rsiValue < i_rsiOversold
rsiOverbought = rsiValue > i_rsiOverbought
rsiNeutral = rsiValue > 40 and rsiValue < 60

// Volume and Momentum
volumeAvg = ta.sma(volume, 20)
volumeSpike = volume > (volumeAvg * i_volumeSpike)
candleBodySize = math.abs(close - open) / close
validCandleBody = candleBodySize > i_minCandleBody

// Bullish/Bearish candle patterns
bullishCandle = close > open
bearishCandle = close < open

// Micro-Structure (Swing Highs/Lows) - More strict
swingHigh = ta.highest(high, i_swingLookback)
swingLow = ta.lowest(low, i_swingLookback)
breakoutHigh = close > swingHigh[1]
breakdownLow = close < swingLow[1]

// Price momentum
priceChange = ta.change(close)
momentum = ta.sma(priceChange, 3)
momentumUp = momentum > 0
momentumDn = momentum < 0

// ==============================
// 3. ADVANCED MARKET REGIME FILTER
// ==============================
// Detect Chop/Sideways Market
kamaChange = math.abs(kamaValue - kamaValue[1]) / kamaValue
atrPercentile = ta.percentile_linear_interpolation(atrValue, 100, 20)
marketChop = kamaChange < (atrValue / close * 0.3) and atrValue < atrPercentile

// Trend strength
trendStrength = math.abs(htfFastEma - htfSlowEma) / close
strongTrend = trendStrength > 0.01

// ==============================
// 4. SUPERIOR ENTRY LOGIC
// ==============================
// Long Conditions: Multiple confirmations required
longTrendConfirm = htfTrendUp and localTrendUp and priceAboveKama
longMomentum = momentumUp and bullishCandle and validCandleBody
longVolume = volumeSpike
longStructure = breakoutHigh
longRsi = not rsiOverbought and (rsiValue > 45 or rsiOversold)
longEntry = not marketChop and longTrendConfirm and longMomentum and longVolume and longStructure and longRsi and volatilityExpanding

// Short Conditions: Multiple confirmations required
shortTrendConfirm = htfTrendDn and localTrendDn and priceBelowKama
shortMomentum = momentumDn and bearishCandle and validCandleBody
shortVolume = volumeSpike
shortStructure = breakdownLow
shortRsi = not rsiOversold and (rsiValue < 55 or rsiOverbought)
shortEntry = not marketChop and shortTrendConfirm and shortMomentum and shortVolume and shortStructure and shortRsi and volatilityExpanding

// ==============================
// 5. ENHANCED FREQUENCY CONTROL
// ==============================
// Max Trades Per Hour
var int hourTradesCount = 0
var int lastHour = hour
var int lastTradeBar = 0

if hour != lastHour
    hourTradesCount := 0
    lastHour := hour

canTrade = hourTradesCount < i_maxTradesPerHr
timeSinceLastTrade = bar_index - lastTradeBar
enoughTimePassed = timeSinceLastTrade >= i_minTimeBetween

// Cooldown after loss
var int barsSinceLoss = i_cooldownBars + 1
if strategy.closedtrades > 0
    if strategy.closedtrades.profit(strategy.closedtrades - 1) < 0
        barsSinceLoss := 0
    else
        barsSinceLoss := barsSinceLoss + 1
else
    barsSinceLoss := barsSinceLoss + 1

cooldownOver = barsSinceLoss >= i_cooldownBars

// Avoid trading during low liquidity (can be customized)
isLiquidHour = true  // Can add hour filters if needed

// Final Entry Conditions
enterLong = longEntry and canTrade and cooldownOver and enoughTimePassed and isLiquidHour and strategy.position_size == 0
enterShort = shortEntry and canTrade and cooldownOver and enoughTimePassed and isLiquidHour and strategy.position_size == 0

// ==============================
// 6. ADVANCED TRADE MANAGEMENT
// ==============================
// Dynamic Position Sizing
stopDistance = atrValue * i_atrMultSl
positionSize = (strategy.initial_capital * i_equityRiskPct) / stopDistance

// Store entry price
var float myEntryPrice = na
var float myStopLoss = na

if enterLong or enterShort
    myEntryPrice := close
    myStopLoss := enterLong ? close - stopDistance : close + stopDistance

// Calculate TP Levels (3-tier system)
longSl = myEntryPrice - stopDistance
longTp1 = myEntryPrice + (atrValue * i_atrMultTp1)
longTp2 = myEntryPrice + (atrValue * i_atrMultTp2)
longTp3 = myEntryPrice + (atrValue * i_atrMultTp3)

shortSl = myEntryPrice + stopDistance
shortTp1 = myEntryPrice - (atrValue * i_atrMultTp1)
shortTp2 = myEntryPrice - (atrValue * i_atrMultTp2)
shortTp3 = myEntryPrice - (atrValue * i_atrMultTp3)

// Track partial closes
var bool tp1Hit = false
var bool tp2Hit = false
var bool movedToBreakeven = false
var float trailStop = na

// Advanced Trailing Stop and Partial Profit Taking
if strategy.position_size > 0
    // Move to breakeven after certain profit
    if not movedToBreakeven and close >= myEntryPrice + (atrValue * i_breakEvenAtr)
        myStopLoss := myEntryPrice + (atrValue * 0.1)  // Small profit lock
        movedToBreakeven := true
    
    // First TP level
    if not tp1Hit and close >= longTp1
        strategy.close("Long", qty_percent = i_partialClose1, comment="TP1")
        tp1Hit := true
        trailStop := close - (atrValue * i_trailAtrMult)
    
    // Second TP level
    if tp1Hit and not tp2Hit and close >= longTp2
        strategy.close("Long", qty_percent = i_partialClose2, comment="TP2")
        tp2Hit := true
        trailStop := close - (atrValue * (i_trailAtrMult * 0.8))
    
    // Trailing stop after TP1
    if tp1Hit
        trailStop := math.max(nz(trailStop), close - (atrValue * i_trailAtrMult))
        if close <= trailStop
            strategy.close("Long", comment="Trail Stop")

if strategy.position_size < 0
    // Move to breakeven after certain profit
    if not movedToBreakeven and close <= myEntryPrice - (atrValue * i_breakEvenAtr)
        myStopLoss := myEntryPrice - (atrValue * 0.1)  // Small profit lock
        movedToBreakeven := true
    
    // First TP level
    if not tp1Hit and close <= shortTp1
        strategy.close("Short", qty_percent = i_partialClose1, comment="TP1")
        tp1Hit := true
        trailStop := close + (atrValue * i_trailAtrMult)
    
    // Second TP level
    if tp1Hit and not tp2Hit and close <= shortTp2
        strategy.close("Short", qty_percent = i_partialClose2, comment="TP2")
        tp2Hit := true
        trailStop := close + (atrValue * (i_trailAtrMult * 0.8))
    
    // Trailing stop after TP1
    if tp1Hit
        trailStop := math.min(nz(trailStop), close + (atrValue * i_trailAtrMult))
        if close >= trailStop
            strategy.close("Short", comment="Trail Stop")

// Reset flags on new entry
if enterLong or enterShort
    tp1Hit := false
    tp2Hit := false
    movedToBreakeven := false
    trailStop := na
    lastTradeBar := bar_index

// ==============================
// 7. EXECUTE ORDERS
// ==============================
if enterLong
    hourTradesCount += 1
    strategy.entry("Long", strategy.long, qty=positionSize, comment="Long Entry")
    strategy.exit("Long SL", "Long", stop=longSl, limit=longTp3, comment="Exit")

if enterShort
    hourTradesCount += 1
    strategy.entry("Short", strategy.short, qty=positionSize, comment="Short Entry")
    strategy.exit("Short SL", "Short", stop=shortSl, limit=shortTp3, comment="Exit")

// ==============================
// 8. PROFESSIONAL VISUALIZATION
// ==============================
// Plot EMAs
plot(htfFastEma, color=color.new(color.blue, 0), linewidth=2, title="Fast EMA")
plot(htfSlowEma, color=color.new(color.red, 0), linewidth=2, title="Slow EMA")
plot(ema200, color=color.new(color.white, 0), linewidth=3, title="EMA 200")
plot(kamaValue, color=color.new(color.orange, 0), linewidth=2, title="KAMA")

// Entry signals with enhanced labels
plotshape(enterLong, style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), size=size.normal, title="LONG")
plotshape(enterShort, style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.normal, title="SHORT")

// Labels with detailed info
if enterLong
    labelText = "🚀 BUY\n" + str.tostring(close, "#.####") + "\nSL: " + str.tostring(longSl, "#.####") + "\nTP: " + str.tostring(longTp1, "#.####")
    label.new(bar_index, low, text=labelText, style=label.style_label_up, color=color.new(color.green, 0), textcolor=color.white, size=size.normal)
    
if enterShort
    labelText = "🔻 SELL\n" + str.tostring(close, "#.####") + "\nSL: " + str.tostring(shortSl, "#.####") + "\nTP: " + str.tostring(shortTp1, "#.####")
    label.new(bar_index, high, text=labelText, style=label.style_label_down, color=color.new(color.red, 0), textcolor=color.white, size=size.normal)

// Plot TP levels
var line tp1Line = na
var line tp2Line = na
var line tp3Line = na
var line slLine = na

if strategy.position_size > 0
    if na(slLine)
        slLine := line.new(bar_index, longSl, bar_index + 1, longSl, color=color.new(color.red, 0), width=2, style=line.style_solid)
        tp1Line := line.new(bar_index, longTp1, bar_index + 1, longTp1, color=color.new(color.yellow, 0), width=1, style=line.style_dashed)
        tp2Line := line.new(bar_index, longTp2, bar_index + 1, longTp2, color=color.new(color.orange, 0), width=1, style=line.style_dashed)
        tp3Line := line.new(bar_index, longTp3, bar_index + 1, longTp3, color=color.new(color.green, 0), width=2, style=line.style_dashed)
    else
        line.set_x2(slLine, bar_index)
        line.set_y1(slLine, myStopLoss)
        line.set_y2(slLine, myStopLoss)
        line.set_x2(tp1Line, bar_index)
        line.set_x2(tp2Line, bar_index)
        line.set_x2(tp3Line, bar_index)
else if strategy.position_size < 0
    if na(slLine)
        slLine := line.new(bar_index, shortSl, bar_index + 1, shortSl, color=color.new(color.red, 0), width=2, style=line.style_solid)
        tp1Line := line.new(bar_index, shortTp1, bar_index + 1, shortTp1, color=color.new(color.yellow, 0), width=1, style=line.style_dashed)
        tp2Line := line.new(bar_index, shortTp2, bar_index + 1, shortTp2, color=color.new(color.orange, 0), width=1, style=line.style_dashed)
        tp3Line := line.new(bar_index, shortTp3, bar_index + 1, shortTp3, color=color.new(color.green, 0), width=2, style=line.style_dashed)
    else
        line.set_x2(slLine, bar_index)
        line.set_y1(slLine, myStopLoss)
        line.set_y2(slLine, myStopLoss)
        line.set_x2(tp1Line, bar_index)
        line.set_x2(tp2Line, bar_index)
        line.set_x2(tp3Line, bar_index)
else
    if not na(slLine)
        line.delete(slLine)
        line.delete(tp1Line)
        line.delete(tp2Line)
        line.delete(tp3Line)
        slLine := na
        tp1Line := na
        tp2Line := na
        tp3Line := na

// Trailing stop visualization
plot(strategy.position_size != 0 ? trailStop : na, color=color.new(color.purple, 0), style=plot.style_cross, linewidth=2, title="Trail Stop")

// Background conditions
bgcolor(marketChop ? color.new(color.gray, 90) : na, title="Chop")
bgcolor(htfTrendUp and strongTrend ? color.new(color.green, 97) : na, title="Strong Bull")
bgcolor(htfTrendDn and strongTrend ? color.new(color.red, 97) : na, title="Strong Bear")

// Volume bars
barcolor(volumeSpike and bullishCandle ? color.new(color.lime, 30) : volumeSpike and bearishCandle ? color.new(color.red, 30) : na)

// Enhanced Stats Dashboard
var table statsTable = table.new(position.top_right, 2, 8, bgcolor=color.new(color.black, 85), border_width=1, border_color=color.gray)
if barstate.islast
    // Win Rate
    table.cell(statsTable, 0, 0, "Win Rate", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    winRate = strategy.wintrades + strategy.losstrades > 0 ? strategy.wintrades / (strategy.wintrades + strategy.losstrades) * 100 : 0
    wrColor = winRate >= 50 ? color.lime : winRate >= 40 ? color.yellow : color.red
    table.cell(statsTable, 1, 0, str.tostring(winRate, "#.#") + "%", text_color=wrColor, text_size=size.small)
    
    // Net Profit
    table.cell(statsTable, 0, 1, "Net P/L", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    table.cell(statsTable, 1, 1, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.lime : color.red, text_size=size.small)
    
    // Profit Factor
    table.cell(statsTable, 0, 2, "Profit Factor", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    profitFactor = strategy.grossloss != 0 ? strategy.grossprofit / strategy.grossloss : 0
    pfColor = profitFactor >= 2 ? color.lime : profitFactor >= 1.5 ? color.yellow : color.red
    table.cell(statsTable, 1, 2, str.tostring(profitFactor, "#.##"), text_color=pfColor, text_size=size.small)
    
    // Total Trades
    table.cell(statsTable, 0, 3, "Trades", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    table.cell(statsTable, 1, 3, str.tostring(strategy.closedtrades), text_color=color.white, text_size=size.small)
    
    // Win/Loss
    table.cell(statsTable, 0, 4, "W / L", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    table.cell(statsTable, 1, 4, str.tostring(strategy.wintrades) + " / " + str.tostring(strategy.losstrades), text_color=color.white, text_size=size.small)
    
    // Position
    table.cell(statsTable, 0, 5, "Position", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    posText = strategy.position_size > 0 ? "LONG ▲" : strategy.position_size < 0 ? "SHORT ▼" : "FLAT"
    posColor = strategy.position_size > 0 ? color.lime : strategy.position_size < 0 ? color.red : color.gray
    table.cell(statsTable, 1, 5, posText, text_color=posColor, text_size=size.small)
    
    // RSI
    table.cell(statsTable, 0, 6, "RSI", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    rsiColor = rsiValue > 65 ? color.red : rsiValue < 35 ? color.lime : color.white
    table.cell(statsTable, 1, 6, str.tostring(rsiValue, "#.#"), text_color=rsiColor, text_size=size.small)
    
    // Trend Status
    table.cell(statsTable, 0, 7, "Trend", bgcolor=color.new(color.gray, 50), text_color=color.yellow, text_size=size.small)
    trendText = htfTrendUp ? "BULLISH" : htfTrendDn ? "BEARISH" : "NEUTRAL"
    trendColor = htfTrendUp ? color.lime : htfTrendDn ? color.red : color.gray
    table.cell(statsTable, 1, 7, trendText, text_color=trendColor, text_size=size.small)
